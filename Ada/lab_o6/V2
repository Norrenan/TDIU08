with Ada.Text_IO;		  use Ada.Text_IO;
with Ada.Integer_Text_IO;         use Ada.Integer_Text_IO;

package body Date_Package is
   
   function Check_Leap (date : in Date_Type) return Boolean is
      Bool : Boolean;
   begin
      
      if (Date.y mod 4) = 0 then
	 Bool := True;
	 if (Date.y mod 100) = 0 then
	    Bool := False;
	    if (Date.y mod 400) = 0 then
	       Bool := True;
	    end if;
   	 end if;
      end if;
      
      return Bool;
      
   end Check_Leap;
   
   procedure Check_Format (S : in String; A, B : in Integer) is
   begin
      for I in A..B loop
	 if S(I) < '0' or S(I) > '9' then
	    raise Format_Error;
	 end if;
         
      end loop;

   end Check_Format;
   
   procedure Check_Day_And_Month (Date : in Date_Type) is 
   begin
      
      if Date.M <= 0 or Date.M > 12 then
	 raise Month_error;
	 
      elsif Date.D > 31 or Date.D <= 00 then
	 raise Day_Error;
	 
      elsif Date.D = 31 and(Date.M = 4 or Date.M = 6 or Date.M = 9 or Date.M = 11) then
	 raise day_Error; 
	 
      elsif Date.D > 29 and Date.M = 2 then 
	 raise Day_Error;
	 
      elsif Date.D = 29 and Date.M = 2 and Check_Leap(Date) = false then
	 raise Day_Error;
      end if;
      
   end Check_Day_And_month;
   
   procedure Check_Date (Date : in Date_Type) is
   begin
      
      if Date.Y < 100 or Date.Y >= 10000 then
	 raise Format_Error;

      elsif Date.Y < 1535 or Date.Y > 9000 then
	 raise Year_Error;
      end if;
      
      Check_Day_And_Month(Date);
      
   end Check_Date;
   
   procedure Get (Date : out Date_Type) is 
      S : String(1..10);
   begin
      Get(S);
      begin
	 --kontrollera formatet
	 if S(5) /= '-' or S(8) /= '-'  then 
	    raise Format_Error;
	 end if;
	 
	 Check_Format(S,1,4);  
	 Check_Format(S,6,7);
	 Check_Format(S,9,10);
	 
	 --kovertera strings till integers
	 Date.Y := Integer'Value(S(1..4));
	 Date.M := Integer'Value(S(6..7));
	 Date.D := Integer'Value(S(9..10));
	 
	
	 Check_Date(Date);

      end;
   end Get;
   
  
   procedure put (Date : in Date_Type) is
   begin
      Put(Date.Y, Width => 1);
      Put("-");
      if Date.M <= 9 then
      	 Put("0");
      end if;
      Put(Date.M, Width => 1);
      Put("-");
      if Date.D <= 9 then
      	 Put("0");
      end if;
      Put(Date.D, Width => 1);
      
   end put;
   
   ------------------------------------------------------------------
   --DEL B
   ------------------------------------------------------------------
   

   function Next_Date (Date : in Date_Type) return Date_type is
      Next : Date_Type;   
   begin
      
      Next := Date;
      
      Next.D := Next.D +1;
      begin
	 
	 Check_Day_And_Month(Next); 
	 
	 return Next;		   
      exception			   
	 when Day_Error =>
	    Next := Date;
	    Next.D := 1;
	    Next.M := Next.M +1;
	    begin
	       Check_Day_And_Month(Next);
	       return Next;
	    exception
	       when Month_Error =>
		  Next := Date;
		  Next.D := 1;
		  Next.M := 1;
		  Next.Y := Next.Y +1;
		  return Next;
	    end;
      end;

   end Next_Date;
   
   
  
   procedure Last_Day_Of_Month (date : in out Date_Type) is
   begin
      
      if Date.M = 4 or Date.M = 6 or Date.M = 9 or Date.M = 11 then
	 Date.D := 30;
      elsif Date.M = 2 and Check_Leap(Date) = True Then
	 Date.D := 29;
      elsif Date.M = 2 and Check_Leap(Date) = False then
	 Date.D := 28;
      else
	 Date.D := 31;
      end if;
      
   end Last_Day_Of_month;
   
 
   function Previous_Date (Date : in Date_Type) return Date_Type is
      Prev : Date_Type; 
   begin
      prev := date;
      
      prev.D := prev.D -1; 
      begin		   
	 Check_Day_And_Month(Prev);
	 return Prev;
      exception
	 when Day_Error =>
	    prev := date;
	    prev.M := prev.M -1;
	    Last_Day_Of_Month(Prev);
	    begin
	       Check_Day_And_Month(prev);
	       return Prev;
	    exception
	       when Month_Error =>
		  prev := date;
		  Prev.Y := Prev.Y -1;
		  Prev.M := 12;
		  Prev.D := 31;
		  return Prev;
		  
	    end;
      end;

   end Previous_Date;
   
 
   function "=" (Left, Right : in Date_Type) return Boolean is
   begin
      
      if Left.Y = Right.Y and Left.M = Right.M and Left.D = Right.d then
	 return true;
      else 
	 return false;
      end if;
      
   end "=";
   
  
   function ">" (Left, right : in Date_Type) return boolean is
      Max_date : Date_Type;	 
      Test : Date_Type;
   begin
      Max_Date.Y :=8999; Max_Date.M :=11; Max_Date.D := 30;
      Test := right;
      while test /= Max_Date loop
	 
	 test := Next_Date(test);
	 
	 if left  = test then
	    return True;
	 end if;
      end loop;
      return False;
   end ">";
   
  
   function "<" (Left, Right : in Date_Type) return Boolean is
      min_Date : Date_Type;
      Test : Date_Type;
   begin
      min_Date.Y := 1535; min_Date.M := 1; min_Date.D :=1;
      Test := Right;
      while Test /= min_Date loop
	 
	 Test := Previous_Date(Test);
	 
	 if Left = Test then
	    return True;
	 end if;
      end loop;
      return False;
   end "<"; 
   
end  Date_Package;
