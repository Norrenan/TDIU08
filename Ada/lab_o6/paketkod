with Ada.Text_IO;		  use Ada.Text_IO;
with Ada.Integer_Text_IO;         use Ada.Integer_Text_IO;
with Ada.Float_Text_IO;           use Ada.Float_Text_IO;

procedure o6 is
   
   Format_Error : exception;
   Year_Error : exception;
   Month_Error: exception;
   Day_Error : exception;
   
   
   type Date_Type is 
      record
	 Y : Integer;
	 M : Integer;
	 D : Integer;
      end record;   
   
   ------------------------------------------------------------------
   --DEL A
   ------------------------------------------------------------------
   function Check_Leap (date : in Date_Type) return Boolean is
      Bool : Boolean;
   begin
      
      if (Date.y mod 4) = 0 then
	 Bool := True;
	 if (Date.y mod 100) = 0 then
	    Bool := False;
	    if (Date.y mod 400) = 0 then
	       Bool := True;
	    end if;
   	 end if;
      end if;
      
      return Bool;
      
   end Check_Leap;
   
   
   procedure Get (Date : out Date_Type) is 
      S : String(1..10);
   begin
      Get(S);
     begin
	 --kontrollera formatet
	 if S(5) /= '-' or S(8) /= '-'  then
	    raise Format_Error;
	 end if;
	 for I in 1..4 loop
	    if S(I) < '0' or S(I) > '9' then
	       raise Format_Error;
	    end if;
	 end loop;
	 
	 for I in 1..2 loop
	    if S(I+5) < '0' or S(I+5) > '9' then
	       raise Format_Error;
	    elsif S(I+8) < '0' or S(I+8) > '9' then
	       raise Format_Error;
	    end if;
	 end loop;
	 
	 --kovertera strings till integers
	 Date.Y := Integer'Value(S(1..4));
	 Date.M := Integer'Value(S(6..7));
	 Date.D := Integer'Value(S(9..10));
	 
	 --kontrollera integers
	-- Test_Date(Date);
	 if Date.Y < 100 or Date.Y >= 10000 then
	    raise Format_Error;

	 elsif Date.Y < 1535 or Date.Y > 9000 then
	    raise Year_Error;
	    
	 elsif Date.M <= 0 or Date.M > 12 then
	    raise Month_Error;
	    
	 elsif Date.D > 31 or Date.D <= 00 then
	    raise Day_Error;
	    
	 elsif Date.D = 31 and(Date.M = 4 or Date.M = 6 or Date.M = 9 or Date.M = 11) then
	    raise Month_Error;
	    
	 elsif Date.D > 29 and Date.M = 2 then
	    raise Day_Error;
	    
	 elsif Date.D = 29 and Date.M = 2 and Check_Leap(Date) = false then
	    raise Day_Error;
       
	 end if;
	 
     
end;
   end Get;
   
   procedure put (Date : in Date_Type) is
   begin
      Put(Date.Y, Width => 1);
      Put("-");
      if Date.M <= 9 then
      	 Put("0");
      end if;
      Put(Date.M, Width => 1);
      Put("-");
      if Date.D <= 9 then
      	 Put("0");
      end if;
      Put(Date.D, Width => 1);
      
   end put;
   
   ------------------------------------------------------------------
   --DEL B
   ------------------------------------------------------------------
   --hjälpunderprogram för prev and next som kontrollerar så att datumet är i korrekt format
   function Check (Date : in Date_Type) return boolean is
   begin
     --  if Date.Y < 100 or Date.Y >= 10000 then
     --  	    return false;

     --  	 elsif Date.Y < 1535 or Date.Y > 9000 then
     --  	    return false;
	    
	 if Date.M <= 0 or Date.M > 12 then
	    return false;
	    
	 elsif Date.D > 31 or Date.D <= 00 then
	    return false;
	    
	 elsif Date.D = 31 and(Date.M = 4 or Date.M = 6 or Date.M = 9 or Date.M = 11) then
	    return false;
	    
	 elsif Date.D > 29 and Date.M = 2 then
	    return false;
	    
	 elsif Date.D = 29 and Date.M = 2 and Check_Leap(Date) = false then
	    return false;
	    end if;
	return True;
       
     end Check;
   
   --underprogram next
   function Next_Date (Date : in Date_Type) return Date_type is
   Next : Date_Type;   
   begin
      
      Next := Date;
      
      Next.D := Next.D +1;
      if Check(Next) = True then
	 return Next;
      else Next := date;
      end if;
      
      Next.D := 1;
      Next.M := Next.M +1;
      if Check(Next) = True then
	 return Next;
      else 
	 Next := Date;
      end if;
      
      Next.D := 1;
      Next.M := 1;
      Next.Y := Next.Y +1;
      
      return Next;

      end Next_Date;
      
      
      --HJälpunderprogram för prev_date.
      procedure Last_Day_Of_Month (date : in out Date_Type) is
      begin
	 
      	 if Date.M = 4 or Date.M = 6 or Date.M = 9 or Date.M = 11 then
      	    Date.D := 30;
      	 elsif Date.M = 2 and Check_Leap(Date) = True Then
      	    Date.D := 29;
      	 elsif Date.M = 2 and Check_Leap(Date) = False then
	    Date.D := 28;
	  else
      	   Date.D := 31;
        end if;
	 
    end Last_Day_Of_month;
    
    --Underprogram Prev_date
      function Previous_Date (Date : in Date_Type) return Date_Type is
	Prev : Date_Type; 
      begin
	  prev := date;
      
      prev.D := prev.D -1;
      if Check(prev) = True then
	 return prev;
      else prev := date;
      end if;
     
      prev.M := prev.M -1;
      Last_Day_Of_Month(Prev);
      if Check(prev) = True then
       	 return prev;
       else 
       	 prev := Date;
       end if;
       
       Prev.Y := Prev.Y -1;
       Prev.M := 12;
       Prev.D := 31;
  
      return prev;
      
	 end Previous_Date;
      
      
   ---------------------------------------------------------------
   --Definitioner
   ---------------------------------------------------------------

   Date_1, Date_2: Date_Type;
begin
   
   Put("Mata in datum 1: ");
   Get(Date_1);
   
   Put("Datumet var: ");
   Put(Date_1);
   New_Line;
   
   Put("Nästa dag: ");
   Put(Next_Date(Date_1));
   New_Line;
   
   Put("Föregående dag: ");
   Put(Previous_Date(Date_1));
   New_Line;
   
   --  Put("Mata in Datum 2: ");
   --  Get(Date_2);
   
   --  Put("Datum 1 > Datum 2? ");
   --  if Date_1 > Date_2 then
   --     Put_Line("Ja.");
   --  else
   --     Put_Line("Nej.");
   --  end if;
   
   --  Put("Datum 1 < Datum 2? ");
   --  if Date_1 < Date_2 then
   --     Put_Line("Ja.");
   --  else
   --     Put_Line("Nej.");
   --  end if;
   
   --  Put("Datum 1 = Datum 2? ");
   --  if Date_1 = Date_2 then
   --     Put_Line("Ja.");
   --  else
   --     Put_Line("Nej.");
   --  end if;
    
exception
   when Format_Error =>
      Put("Felaktigt format.");
   when Year_Error =>
      Put("Felaktigt år.");
   when Month_Error =>
      Put("Felaktig månad.");
   when Day_Error =>
      Put("Felaktig dag.");
      
end o6;
