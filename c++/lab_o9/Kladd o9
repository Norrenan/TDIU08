#include "hero_handling.h"
#include "register_handling.h"
#include <iostream>
#include <vector>
#include <iomanip>
#include <sstream>

using namespace std;

void hero_register(vector<Hero_Type>       & heroes,
		   string            const & file_name) 
{
  Hero_Type hero;
  
  while (true)
  {
    cout << "Enter hero information:" << endl;
	
    if (new_hero(heroes, file_name) == false)
    {
      cout << "Hero already in register. ";
       cin.ignore(1000,'\n');
    }
    else
    {
      break;
    } 
  }
  cout << "The hero was added to the register on file " << file_name << endl;
}


//Up
vector<int> load_array_interests()
{
  vector<int> numb{};
  stringstream ss;
  int integer{};
   string s;

  getline(cin,s);
  ss.str(s);
  //cout << " sträng:" << ss.str()<< " ";
  while(ss >> integer)
  {
    //cout << " i loop  " << integer;
    if((integer < 16) and (integer > 0))
    {
      numb.push_back(integer);
    }
  }
  //cout << "storlek array: ";
  //cout << numb.size() << endl;
  return numb;
}


void hero_finder (vector<Hero_Type> & heroes)
{
  vector<Hero_Type> match_heroes {};
  cin.ignore(1000,'\n'); 
  cout << "Enter your interests (at least one between 1 and 15): ";
  //ladda array med getline, kolla på sista nummret och se om det är i intervallet 1 till 15, annars loopa.
  
  vector<int> numb{};

  while (true)
  {
    numb = load_array_interests();
    
     if (numb.size() > 0)
     {
       break;
     }
  }
     match_heroes = search_heroes(heroes, numb);
     cout << "There are " << match_heroes.size() << " matching heroes." << endl;
     cout << "Hero name  Birth year  Weight  Hair color  Interests"<< endl;
     cout << "===================================================="<< endl;

     print_heroes(match_heroes);
     
    // if (numb.back() < 16 and numb.back() > 0) //funkar ej om numb inte har nått innehåll.
    // {
    //   break;
    // }
  
      
    // }
    //  cout <<"efter loop" <<integer<< endl; //förblir 100
    //  if((integer < 16) and (integer > 0))
    //  {
    //    break;
    //  }
  // }
  
      
  // while(getline(cin,s)) //funkar ej
  // {
  //   ss.str(s);
  //   while(ss >> integer)
  //   {
  //     if((integer < 16) and (integer > 0))
  //     {
  // 	numb.push_back(integer);
  // 	cout << " lagrar ";
  //     }
  //     for(int i{}; i < static_cast<int>(numb.size()); i++)
  //     {

  // 	cout << numb.at(i) << " ";
  //     }
      
  //   }
  // }
   

  
// for(int i{}; i < static_cast<int>(numb.size()); i++)
// {

//   cout << numb.at(i) << " ";
// }


  // cout << "KLAR";
  

}


void print_menu()
{
  cout << "1) Add new hero to register file" << endl
       << "2) Find matching heroes" << endl
       << "3) Quit program" << endl;
}

void menu_selection (int & selection)
{
  print_menu();
    
  while(true)
  {
    cout << "Select: ";
    cin >> selection;
      
    if ((selection > 0) and (selection < 4))
    {
      break;		   
    }
  }
}

void menu (vector<Hero_Type>       & heroes,
	   string            const & file_name)
{
  int selection;
  cout << "Welcome to Hero Matchmaker 3000!" << endl;
  while (true)
  {
    menu_selection(selection);

    if (selection == 1)
    {
      hero_register(heroes, file_name);
    }

    else if (selection == 2)
    {
      hero_finder(heroes);
    }

    else if (selection == 3)
    {
      break;
    }
  }
  
  cout << "Terminating Hero Matchmaker 3000!";
}

int main(int argc, char*argv[])
{
  fstream hero_file;
  vector<Hero_Type> heroes;
  string file_name{};
  
  
  if (argc < 2 or argc > 2)
  {
    cout << "Incorrect number of arguments!" << endl
	 << "Usage: " << argv[0] << " REGISTERFILE";
  }
  else
  {
    file_name = argv[1];
    hero_file.open(argv[1]);
    heroes = read_file(hero_file); //ladda array med data från fil.
    hero_file.close();

    
    menu(heroes, file_name); 
  }
  return 0;
}
//stänga fil = filnamn.close();


//  //DEBUG!!
    // for(int i{}; i < static_cast<int>(heroes.size()); i++)
  // {
  //   cout << heroes.at(i).name<< " "; 
  //   cout << heroes.at(i).birthdate << " ";
  //   cout << heroes.at(i).weight<< " ";
  //   cout << heroes.at(i).hair<< " ";

  //   for(int k{}; k < static_cast<int>(heroes.at(i).interests.size()); k++)
  //   {
  //     cout << heroes.at(i).interests.at(k)<< " ";
  //   }
  //   cout << endl;
  // }